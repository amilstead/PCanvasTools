import os
import shutil
from optparse import OptionParser

# Important values in template page:
#   $PROJ_NAME$ -- The name of the project the user wishes. If this is not specified, it defaults to
#          the main class name.
#   $PROJ_DRIVER$ -- The driver class that should be executed as the entry point to the applet.
#   $PROJ_ARCHIVE$ -- The archive (.jar) that will be generated by the ant build.xml file.
#   $TAR_ARCHIVE$ -- A "tar"ed (.tar.gz) archive that will contain all of the project source.
#   $ZIP_ARCHIVE$ -- A zipped archive that will contain all of the project source.

class GlibExporter:
    def __init__(self, projName, className, glibLocation, verbose):
        self.projName = projName
        self.className = className
        self.verbose = verbose
        if (os.name == "nt"):
            self.isWindows = True
        else:
            self.isWindows = False
    def export(self, targetDir):

        target = targetDir
        try:
            shutil.rmtree(target + "/export")
        except shutil.Error:
            print("Not removing 'export' directory. Doesn't exist.")
        except OSError:
            print("Not removing 'export' directory. Doesn't exist.")
        #except WindowsError:
        #    print("Not removing 'export' directory. Doesn't exist.")

        # informational output prints.
        if (self.verbose):
            print("Preparing to export applet...")
            print("Using Project Name: '%s'." % (self.projName))
            print("Using Java Main Class: '%s'." % (self.className))

        # here we should search through the source file to find a java file matching
        # the class name, then copy the package statement (if there is one)
        if (target == None): target = os.getcwd()
        if (self.verbose): print("Searching for main Java file...")
        targetFile = target + "/%s.java" % (self.className)

        try:
            javaMain = open(targetFile, "r")
            exportedFile = open((target + "/%sGen.java" % (self.className)), "w+")
            if (self.verbose): print("Found main Java file!")
            self.height = 800
            self.width = 800
            for line in javaMain:
                exLine = line.replace(("class %s" % (self.className)), ("class %sGen" % (self.className)))
                exLine = exLine.replace("super.setup();", "super.setupWeb();")
                exportedFile.write(exLine)
            javaMain.close()
            exportedFile.close()
            self.className = "%sGen" % (self.className)

        except IOError:
            if targetDir == None: debugDir = os.getcwd()
            else: debugDir = targetDir
            print("Could not find '%s' in directory: '%s'." % (self.className + ".java", target + "/"))
            print("Exiting...")
            return

        try:
            # Next we need to modify the build.properies file so we can use
            # ant to build the project code
            if (self.verbose): print("Opening build.properties template...")
            bPropsTemplate = open("build.props.template", "r")
            if (self.verbose): print("Opened template successfully!")
            bProps = open("build.properties", "w+")
            if (self.verbose):
                print("Successfully created new build.properties file.")
                print("Preparing to modify template.")

            if (self.isWindows):
                if (self.verbose): 
                    print("Fixing backslashes for windows system...")
                    print("Old target: %s" % (target))
                buildTarget = target.replace("\\", "\\\\")
                if (self.verbose): print("New target: %s" % (buildTarget))
            else:
                buildTarget = target
            for line in bPropsTemplate:
                exLine = line.replace("$TARGET_DIR$", buildTarget)
                exLine = exLine.replace("$PROJ_NAME$", self.projName)
                exLine = exLine.replace("$DRIVER$", self.className)
                bProps.write(exLine)
            bPropsTemplate.close()
            bProps.close()
            print("build.properties template modified successfully.")
        except IOError:
            print("build.properties file generation failed!.")
            print("Please make sure this file is the in same directory as the script during the export process.")
            print("Exiting...")
            return

        # Try to build *crosses fingers*
        try:
            os.system("ant clean build-jar")
            os.remove((target + "/%s.java" % (self.className)))
        except OSError:
            print("Unknown error occurred while attempting to build the project with ant.")

        # Next we need to load the html template into a temporary buffer.
        try:
            if (self.verbose): print("Searching for index.template file.")
            template = open("index.template", "r")
            if (self.verbose): 
                print("Found applet template.")
                print("Preparing to export template with your settings.")

        except IOError:
            print("Cannot find the template index file for the applet.")
            print("Make sure this file is in the same directory as the script during the export process.")
            print("Exiting...")
            return

        # Last but not least, write out the buffer to an "index.html" page in the applet/ dir.
        # Then replace the "$PROJ_NAME$", "$PROJ_ARCHIVE$" and "$PROJ_DRIVER$" strings.
        if (not os.path.isdir(target + "/export/applet")): os.makedirs(target + "/export/applet")
        exportedTemplate = open(target + "/export/applet/index.html", "w+")
        for line in template:
            exLine = line.replace("$PROJ_NAME$", self.projName)
            exLine = exLine.replace("$PROJ_DRIVER$", self.className)
            exLine = exLine.replace("$PROJ_ARCHIVE$", self.projName + ".jar")
            exLine = exLine.replace("$WIDTH$", "%d" % self.width)
            exLine = exLine.replace("$HEIGHT$", "%d" % self.height)
            exLine = exLine.replace("$TARGET$", target)
            exportedTemplate.write(exLine)

        # close files that we opened for writing.
        template.close()
        exportedTemplate.close()

        self.packSource(target)
        return 0

    def packSource(self, target):
        # try tarring it first.
        try:
            shutil.rmtree(target + "/export/download")
            shutil.rmtree(target + "/export/applet/download")
        except shutil.Error:
            print("Directories don't exist. Not removing...")
        except OSError:
            print("Directories don't exist. Not removing...")

        os.makedirs(target + "/export/download")

        try:
            print("\n##### INFO #####")
            print("Attempting to tar your source directory.")
            print("If the following ouptput indicates failure, you may need to do this manually...")
            print("##### END INFO #####\n")
            downloadLoc = "download/" + self.projName + ".tar.gz"
            tarStr = "<a href=\"%s\">%s Source</a> (.tar.gz) <br />" % (downloadLoc, self.projName)
            cmd = ("tar czvf %s %s" % (target + "/export/" + downloadLoc, (target + "/export/applet/*")))

            if (self.verbose): print(cmd)
            os.system(cmd)
        except OSError:
            print("Was not able to tar the source.")
            tarStr = ""

        try:
            print("\n##### INFO #####")
            print("Attempting to zip your source directory.")
            print("If the following ouptput indicates failure, you may need to do this manually...")
            print("##### END INFO #####\n")
            downloadLoc = "download/" + self.projName + ".zip"
            zipStr = "<a href=\"%s\">%s Source</a> (.zip) <br />" % (downloadLoc, self.projName)
            cmd = ("zip -r %s %s" % (target + "/export/" + downloadLoc, (target + "/export/applet/*")))
            if (self.verbose): print(cmd)
            os.system(cmd)
        except OSError:
            print("Was not able to zip the archive")
            zipStr = ""

        template = open(target + "/export/applet/index.html", "r+")
        exportedTemplate = open(target + "/export/applet/index.tmp.html", "w+")
        if (self.verbose):
            print("Lines: ")
            print(tarStr)
            print(zipStr)
            print("Now exist on the exported applet page.")
        for line in template:
            exLine = line.replace("$TAR_ARCHIVE$", tarStr)
            exLine = exLine.replace("$ZIP_ARCHIVE$", zipStr)
            exportedTemplate.write(exLine)

        # close files that we opened for writing.
        template.close()
        exportedTemplate.close()
        shutil.move((target + "/export/download"), (target + "/export/applet/"))
        os.remove(target + "/export/applet/index.html")
        os.rename((target + "/export/applet/index.tmp.html"), (target + "/export/applet/index.html"))
        return 0

    def printAttrs(self):
        print(self.className)

usage = "\n\t$ python %prog [options] proj_name java_main_class \n\n\tproj_name - the name of the project you would like to see on the applet (please put quotes around multiple words)\n\tjava_main_class - the java file which extends OpenGLApplet\n\nThis script can be run from the project root ('lib' folder), or from any location\ngiven that the necessary files (build.xml, build.props.template and index.template) are present, and the -d flag is used.\nThe project root's 'lib' folder must also contain the 'opengl.jar', 'jogl.jar', 'gluegent-rt.jar', 'PCanvasTools-X.X.jar' \nand processing's 'core.jar' files in order for the export to fully succeed.\n\nIf running the applet after executing this export script fails, ensure that all of the dependent jars are in place\nand that the proper files are in the same directory as this script, then try again."
parser = OptionParser(usage=usage, version="%prog 1.0")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="print export step details")
parser.add_option("-d", "--targetDir", action="store", dest="targetDir", type="string", metavar="TARGET_DIR", help="target directory containing project files")
parser.add_option("-g", "--glibLoc", action="store", dest="glibLoc", type="string", metavar="GLIB_LOCATION", help="location of the PCanvasTools-X.X.jar file (this defaults to 'lib' in your project directory)")
(options, args) = parser.parse_args()

if len(args) < 2:
    print("Not enough arguments supplied...")
    parser.print_help()
elif len(args) == 2:
    print(options.targetDir)
    GlibExporter(args[0], args[1], options.glibLoc, options.verbose).export(options.targetDir)
else:
    print("Too many arguments supplied...")
    parser.print_help()
#print (args)


